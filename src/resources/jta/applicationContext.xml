<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd
http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.1.xsd
http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.2.xsd">

	<context:annotation-config />
	<context:component-scan base-package="com.commerce.dao" />
	<context:component-scan base-package="com.commerce.service" />

	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:resources/app.properties" />
	</bean>


	<bean id="mysqlDataSource" class="com.atomikos.jdbc.AtomikosDataSourceBean"
		init-method="init" destroy-method="close">
		<property name="uniqueResourceName" value="${dataSource.uniqueName}" />
		<property name="maxPoolSize" value="5" />
		<property name="minPoolSize" value="1" />
		<property name="maxIdleTime" value="60" />
		<property name="maintenanceInterval" value="60" />
		<property name="reapTimeout" value="0" />
		<property name="testQuery" value="select 1 from dual" />
		<property name="xaDataSource" ref="mysqlDS" />
	</bean>
	
	<bean id="mysqlDS" class="com.mysql.jdbc.jdbc2.optional.MysqlXADataSource"
		lazy-init="true">
		<property name="pinGlobalTxToPhysicalConnection" value="true" />
		<property name="user" value="${dataSource.DB_USER}" />
		<property name="password" value="${dataSource.DB_PASSWORD}" />
		<property name="URL" value="${dataSource.DB_URL}" />
	</bean>

	<bean id="mysqlEntityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
	<property name="persistenceXmlLocation" value="${persistence}"/>
	<property name="persistenceUnitName" value="mysqldb" />
		<property name="dataSource" ref="mysqlDataSource" />

		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" />
		</property>
	
	</bean>
	
	
<bean id="userTransactionService"  
  class="com.atomikos.icatch.config.UserTransactionServiceImp"  
  init-method="init" destroy-method="shutdownForce"> 
    <constructor-arg> 
        <!-- IMPORTANT: specify all Atomikos properties here --> 
        <props> 
                <prop key="com.atomikos.icatch.service">com.atomikos.icatch.standalone.UserTransactionServiceFactory</prop>
                <prop key="com.atomikos.icatch.tm_unique_name">my-unique-tm-name-for-project1</prop>
                <prop key="com.atomikos.icatch.log_base_name">tmlog</prop>
                <prop key="com.atomikos.icatch.log_base_dir">c:/</prop>
                
                <!-- DEBUGGING PROPERTIES -->
                <prop key="com.atomikos.icatch.output_dir">c:/</prop>
                <prop key="com.atomikos.icatch.console_file_name">atomikos.log</prop>
                <prop key="com.atomikos.icatch.console_log_level">INFO</prop>
                <prop key="com.atomikos.icatch.threaded_2pc">true</prop>
     
        </props> 
    </constructor-arg> 
</bean>

<bean id="AtomikosUserTransaction"  
      class="com.atomikos.icatch.jta.UserTransactionImp"   
      depends-on="userTransactionService"> 
   <property name="transactionTimeout" value="300" /> 
</bean> 
 
<!--  
     Construct Atomikos UserTransactionManager,  
     needed to configure Spring  
--> 
<bean id="AtomikosTransactionManager"  
      class="com.atomikos.icatch.jta.UserTransactionManager"  
      init-method="init" destroy-method="close"  
      depends-on="userTransactionService"> 
 
   <!-- IMPORTANT: disable startup because the userTransactionService above does this --> 
   <property name="startupTransactionService" value="false"/> 
 
   <!--   
         when close is called,  
         should we force transactions to terminate or not?  
   --> 
   <property name="forceShutdown" value="false" /> 
</bean> 

<bean id="JtaTransactionManager"  
      class="org.springframework.transaction.jta.JtaTransactionManager"  
      depends-on="userTransactionService">
      <property name="allowCustomIsolationLevels" value="true" /> 
   <property name="transactionManager" ref="AtomikosTransactionManager" /> 
   <property name="userTransaction" ref="AtomikosUserTransaction" /> 
</bean>

	
	<!-- annotation driven -->
	<!--  -->
	<tx:annotation-driven transaction-manager="JtaTransactionManager"
		proxy-target-class="false" />
		
   <!-- XML driven -->
	<!-- 
	<tx:advice id="txAdvice" transaction-manager="JtaTransactionManager">
		<tx:attributes>
			<tx:method name="*" rollback-for="Exception"
				no-rollback-for="IOException" />
		</tx:attributes>
	</tx:advice>
 -->
 <!-- 
	<bean id="txAttributeSource"
		class="com.commerce.controller.RollbackForTransactionAttributeSource" />

	<bean id="txInterceptor"
		class="org.springframework.transaction.interceptor.TransactionInterceptor">
		<property name="transactionManagerBeanName" value="JtaTransactionManager" />
		<property name="transactionAttributeSource" ref="txAttributeSource" />
	</bean>

	<bean
		class="org.springframework.transaction.interceptor.BeanFactoryTransactionAttributeSourceAdvisor">
		<property name="transactionAttributeSource" ref="txAttributeSource" />
		<property name="adviceBeanName" value="txInterceptor" />
	</bean>
 -->
 

	<!-- This resolves messages from resource bundles for different locales -->
	<bean id="messageSource"
		class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basename" value="messages" />
	</bean>

	<!-- a pooling based JMS provider -->
	<!-- ActiveMQ connection factory -->
	<!-- JTA/XA-enabled JMS -->

	<bean id="atomikosJmsConnectionFactory" class="com.atomikos.jms.AtomikosConnectionFactoryBean"
		init-method="init" destroy-method="close">
		<property name="uniqueResourceName" value="ActiveMQXA" />
		<property name="xaConnectionFactory">
			<bean class="org.apache.activemq.ActiveMQXAConnectionFactory">
				<property name="brokerURL" value="${activemq.URL}" />
				<property name="userName" value="${activemq.user}" />
				<property name="password" value="${activemq.password}" />
			</bean>
		</property>
		<property name="maxPoolSize" value="40" />
	</bean>

	<bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">
		<property name="connectionFactory" ref="atomikosJmsConnectionFactory" />
		<property name="receiveTimeout" value="2000" />
		<!-- "sessionTransacted" has to be set to "true" to start an transaction 
			for every incoming JMS message -->
		<property name="sessionTransacted" value="true" />
		<!-- sessionAcknowledgeMode has to be set to javax.jms.Session.SESSION_TRANSACTED -->
		<property name="sessionAcknowledgeMode" value="0" />
	</bean>


</beans>
